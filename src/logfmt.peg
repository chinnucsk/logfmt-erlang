logs <- head:log tail:(crlf log)* / ''
`
case Node of
  [] -> [];
  [""] -> [];
  _ ->
    Head = proplists:get_value(head, Node),
    Tail = [R || [_,R] <- proplists:get_value(tail, Node)],
    [Head|Tail]
end
`;

log <- head:p tail:(space p)* / ''
`
case Node of
  [] -> [];
  [""] -> [];
  _ ->
    Head = proplists:get_value(head, Node),
    Tail = [R || [_,R] <- proplists:get_value(tail, Node)],
    [Head|Tail]
end
`;

p <- pair / key:string '= ' / key:string
`
case Node of
  {key, Key} ->
    {Key, <<>>};
  [{key, Key}, <<"= ">>] ->
    {Key, <<>>};
  _ ->
    Node
end
`;

pair <- space? key:string '=' value:log_value space?
`
{proplists:get_value(key, Node), proplists:get_value(value, Node)}
`;

log_value <- (number / true / false / string) ~;

string <- quoted_string / (!'"' !'=' !' ' ("\\\\" / '\\"' / .))+ `iolist_to_binary(Node)`;
quoted_string <- '"' chars:(!'"' ("\\\\" / '\\"' / .))+ '"' `iolist_to_binary(proplists:get_value(chars, Node))`;

number <- int frac? exp? units?
`
case Node of
  [Int, [], [], _] -> list_to_integer(binary_to_list(iolist_to_binary(Int)));
  [Int, Frac, [], _] -> list_to_float(binary_to_list(iolist_to_binary([Int, Frac])));
  [Int, [], Exp, _] -> list_to_float(binary_to_list(iolist_to_binary([Int, ".0", Exp])));
  _ -> list_to_float(binary_to_list(iolist_to_binary(Node)))
end
`;

units <- 'ms' ~;
int <- '-'? (non_zero_digit digit+) / digit ~;
frac <- '.' digit+ ~;
exp <- e digit+ ~;
e <- [eE] ('+' / '-')? ~;
non_zero_digit <- [1-9] ~;
digit <- [0-9] ~;
true <- 'true' `true`;
false <- 'false' `false`;
space <- [ \t\s]* ~;
crlf <- [\r]? [\n] ~;